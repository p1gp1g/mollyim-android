name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Increase swap space
      run: |
        sudo fallocate -l 8G /swapB
        sudo chmod 600 /swapB
        sudo mkswap /swapB
        sudo swapon /swapB
        swapon --show

    - name: Build Docker image
      run: docker-compose build
      working-directory: reproducible-builds

    - name: Build release APKs
      if: "!contains(github.ref_name, 'alpha')"
      run: docker-compose run assemble
      working-directory: reproducible-builds

    - name: Extract alpha keystore
      if: "contains(github.ref_name, 'alpha')"
      run: echo "$ALPHA_KEYSTORE" | base64 -d > reproducible-builds/certs/alpha.jks
      env:
        ALPHA_KEYSTORE: ${{ secrets.ALPHA_KEYSTORE }}

    - name: Build alpha release APKs
      if: "contains(github.ref_name, 'alpha')"
      run: docker-compose run assemble-alpha
      working-directory: reproducible-builds
      env:
        CI_KEYSTORE_PATH: certs/alpha.jks
        CI_KEYSTORE_ALIAS: alpha
        CI_KEYSTORE_PASSWORD: ${{ secrets.ALPHA_KEYSTORE_PASSWORD }}

    - name: Clean up keystores
      if: "always()"
      run: rm -f reproducible-builds/certs/alpha.jks

    - name: Log checksums
      run: find reproducible-builds/apks -name "*.apk" -exec sha256sum '{}' \;

    - name: Upload APKs
      uses: actions/upload-artifact@v3
      with:
        name: build
        path: reproducible-builds/apks/*/release/*.apk
        if-no-files-found: error

  publish:
    name: Publish
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.17"

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Check version for upgrade compatibility
        if: "github.repository_owner == 'mollyim'"
        run: |
          gh release download --pattern '*.apk' --dir latest
          latest_apks=(latest/*.apk)
          build_apks=(build/*/release/*.apk)
          version_code() {
            local aapt=($ANDROID_HOME/build-tools/30.*/aapt)
            $aapt d badging "$1" | gawk 'match($0, /^package:.*versionCode=.([0-9]+)/, v) {print v[1]}'
          }
          test $(version_code "$build_apks") -gt $(version_code "$latest_apks")
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create stable release draft
        if: "!contains(github.ref_name, 'alpha') && !contains(github.ref_name, 'beta')"
        run: gh release create -d -t "Molly $GITHUB_REF_NAME" "$GITHUB_REF_NAME"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create beta release draft
        if: "contains(github.ref_name, 'beta')"
        run: gh release create -d -p -t "Molly $GITHUB_REF_NAME" "$GITHUB_REF_NAME"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate alpha release notes
        if: "contains(github.ref_name, 'alpha')"
        run: |
          go install github.com/git-chglog/git-chglog/cmd/git-chglog@latest
          git-chglog -o release-notes.md "$GITHUB_REF_NAME"

      - name: Create alpha release
        if: "contains(github.ref_name, 'alpha')"
        run: gh release create -p -t "Molly Insider $GITHUB_REF_NAME" -F release-notes.md "$GITHUB_REF_NAME" ./build/*/release/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
